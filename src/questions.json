{
  "JavaScript": [
    {
      "title": "Что такое замыкание (closure) в JavaScript?",
      "variants": [
        "Способ скрыть переменные",
        "Доступ функции к переменным из внешней области видимости",
        "Функция внутри другой функции"
      ],
      "correct": 1
    },
    {
      "title": "Какой метод массива используется для преобразования каждого элемента?",
      "variants": [
        "filter()",
        "reduce()",
        "map()"
      ],
      "correct": 2
    },
    {
      "title": "Что вернёт typeof null в JavaScript?",
      "variants": [
        "object",
        "undefined",
        "null"
      ],
      "correct": 0
    },
    {
      "title": "Что такое hoisting в JavaScript?",
      "variants": [
        "Создание глобальных переменных",
        "Оптимизация кода движком JS",
        "Поднятие переменных и функций в начало области видимости"
      ],
      "correct": 2
    },
    {
      "title": "Какой оператор проверяет равенство по значению и типу?",
      "variants": [
        "=",
        "==",
        "==="
      ],
      "correct": 2
    },
    {
      "title": "Что такое промис (Promise) в JavaScript?",
      "variants": [
        "Тип данных для хранения чисел",
        "Объект представляющий текущее или будущее значение асинхронной операции",
        "Способ объявления переменных"
      ],
      "correct": 1
    },
    {
      "title": "Как добавить новый элемент в конец массива?",
      "variants": [
        "shift()",
        "push()",
        "pop()"
      ],
      "correct": 1
    },
    {
      "title": "Что делает оператор '...' в JavaScript?",
      "variants": [
        "Создает бесконечный цикл",
        "Распространяет массив или объект на отдельные элементы",
        "Обозначает комментарий"
      ],
      "correct": 1
    },
    {
      "title": "Как создать объект в JavaScript?",
      "variants": [
        "const obj = []",
        "const obj = () => {}",
        "const obj = {}"
      ],
      "correct": 2
    },
    {
      "title": "Что такое IIFE?",
      "variants": [
        "Тип данных",
        "Синтаксическая ошибка",
        "Немедленно вызываемая функция"
      ],
      "correct": 2
    }
  ],
  "React": [
    {
      "title": "React - это ... ?",
      "variants": [
        "фреймворк",
        "приложение",
        "библиотека"
      ],
      "correct": 2
    },
    {
      "title": "Компонент - это ... ",
      "variants": [
        "то, что я не знаю что такое",
        "часть приложения или страницы",
        "приложение"
      ],
      "correct": 1
    },
    {
      "title": "Что такое JSX?",
      "variants": [
        "Это функция",
        "Это простой HTML",
        "Это тот же HTML, но с возможностью выполнять JS-код"
      ],
      "correct": 2
    },
    {
      "title": "Что такое useState?",
      "variants": [
        "Это глобальный стейт",
        "Это функция для хранения данных компонента",
        "Это когда на ты никому не нужен"
      ],
      "correct": 1
    },
    {
      "title": "Какой метод жизненного цикла вызывается после рендера компонента?",
      "variants": [
        "shouldComponentUpdate",
        "componentDidMount",
        "componentWillUnmount"
      ],
      "correct": 1
    },
    {
      "title": "Что делает метод ReactDOM.render()?",
      "variants": [
        "Создает новый компонент",
        "Обновляет состояние компонента",
        "Отображает React-компонент в DOM"
      ],
      "correct": 2
    },
    {
      "title": "Что такое props в React?",
      "variants": [
        "Локальное состояние компонента",
        "Методы жизненного цикла",
        "Данные, передаваемые в компонент"
      ],
      "correct": 2
    },
    {
      "title": "Как создать компонент в React?",
      "variants": [
        "Только как класс",
        "Как функцию или класс",
        "Только как функцию"
      ],
      "correct": 1
    },
    {
      "title": "Что использует React для эффективного обновления DOM?",
      "variants": [
        "Shadow DOM",
        "Real DOM",
        "Virtual DOM"
      ],
      "correct": 2
    },
    {
      "title": "Какой хук используется для побочных эффектов?",
      "variants": [
        "useContext",
        "useState",
        "useEffect"
      ],
      "correct": 2
    }
  ],
  "Node.js": [
    {
      "title": "Node.js - это ...",
      "variants": [
        "Язык программирования",
        "Фреймворк для фронтенда",
        "Среда выполнения JavaScript на сервере"
      ],
      "correct": 2
    },
    {
      "title": "Какой модуль Node.js используется для работы с файловой системой?",
      "variants": [
        "http",
        "path",
        "fs"
      ],
      "correct": 2
    },
    {
      "title": "Что такое NPM?",
      "variants": [
        "Фреймворк для тестирования",
        "Среда разработки",
        "Менеджер пакетов для Node.js"
      ],
      "correct": 2
    },
    {
      "title": "Какой объект доступен в Node.js для работы с путями?",
      "variants": [
        "url",
        "fs",
        "path"
      ],
      "correct": 2
    },
    {
      "title": "Как создать сервер в Node.js?",
      "variants": [
        "Используя модуль path",
        "Используя модуль fs",
        "Используя модуль http"
      ],
      "correct": 2
    },
    {
      "title": "Что такое middleware в Express.js?",
      "variants": [
        "База данных",
        "Шаблонизатор",
        "Функции, обрабатывающие запросы и ответы"
      ],
      "correct": 2
    },
    {
      "title": "Какой метод используется для обработки GET-запросов в Express?",
      "variants": [
        "app.use()",
        "app.post()",
        "app.get()"
      ],
      "correct": 2
    },
    {
      "title": "Что такое package.json?",
      "variants": [
        "Файл с тестами",
        "Файл с настройками сервера",
        "Файл с метаданными и зависимостями проекта"
      ],
      "correct": 2
    },
    {
      "title": "Какой командой устанавливаются зависимости из package.json?",
      "variants": [
        "npm run",
        "npm start",
        "npm install"
      ],
      "correct": 2
    },
    {
      "title": "Что такое Event Loop в Node.js?",
      "variants": [
        "Тип данных",
        "Цикл разработки",
        "Механизм обработки асинхронных операций"
      ],
      "correct": 2
    }
  ],
  "Web APIs": [
    {
      "title": "Что такое Local Storage?",
      "variants": [
        "Кэш процессора",
        "База данных на сервере",
        "Механизм хранения данных в браузере"
      ],
      "correct": 2
    },
    {
      "title": "Какой метод используется для отправки данных на сервер?",
      "variants": [
        "console.log()",
        "alert()",
        "fetch()"
      ],
      "correct": 2
    },
    {
      "title": "Что такое CORS?",
      "variants": [
        "Язык программирования",
        "Фреймворк",
        "Механизм безопасности браузеров"
      ],
      "correct": 2
    },
    {
      "title": "Как получить геолокацию пользователя?",
      "variants": [
        "document.location",
        "window.location",
        "navigator.geolocation"
      ],
      "correct": 2
    },
    {
      "title": "Что делает метод addEventListener?",
      "variants": [
        "Удаляет элемент",
        "Создает новый элемент",
        "Добавляет обработчик события"
      ],
      "correct": 2
    },
    {
      "title": "Какой объект представляет историю браузера?",
      "variants": [
        "window.screen",
        "window.navigator",
        "window.history"
      ],
      "correct": 2
    },
    {
      "title": "Что такое Web Workers?",
      "variants": [
        "Веб-сервисы",
        "Специалисты по веб-разработке",
        "Механизм выполнения кода в фоновом потоке"
      ],
      "correct": 2
    },
    {
      "title": "Как создать новый элемент в DOM?",
      "variants": [
        "document.write()",
        "document.cloneNode()",
        "document.createElement()"
      ],
      "correct": 2
    },
    {
      "title": "Что такое Service Worker?",
      "variants": [
        "Веб-сервер",
        "Сотрудник службы поддержки",
        "Скрипт, работающий в фоне и управляющий кэшем"
      ],
      "correct": 2
    },
    {
      "title": "Как получить элемент по его ID?",
      "variants": [
        "document.getElementsByClassName()",
        "document.querySelector()",
        "document.getElementById()"
      ],
      "correct": 2
    }
  ]
}